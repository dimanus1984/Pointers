#include<iostream>
using namespace std;

#define tab "\t"
//define - опредеоиить
//Директива #define показывает компилятору, что заменить, чем заменить
//#define создает макроопределение (макрос)
//identifier (идентификатор) - это имя переменной, массива, функуии, и т.д.

void Exchange(int &a, int &b); //Протип функции (Объявление функции - Function declaration)
//В прототипе и реализации функции мы ппоказываем, какием параметры функция ПРИНИМАЕТ
void main()
{
	setlocale(LC_ALL, "Russiaan");
	int a = 2, b = 3;
	cout << a << tab << b << endl;
	Exchange(a, b); // Вызов функции - Function call. (передаваемые параметры)
	//Когда мы вызываем функцию, мы ПЕРЕДАЕМ в нее параметры.
	cout << a << tab << b << endl;
}
void Exchange(int &a, int &b) //Реализация (Определение) функции - Function definition
{
	int buffer = a;
	a = b;
	b = buffer;
	cout << a << tab << b << endl;
	/*a += b;
	b = a - b;
	a -= b;
	cout << a << tab << b << endl;*/
}

/*
Передача параметров!!!
Существует 3 способа передать параметры в функцию:
-По значению - By value;
-По указателю - By pointer;
-По ссылке - By reference;
--------------------------------------------------------
Обычно мы передаем параметры в функции по значению.
При этом значения передаваемых переменных копируются в функцию,
и если функциия изменяет эти значения, то изменения ппроисходят с копиями переменных
а не с самими переменнами.
--------------------------------------------------------
Для того чтобы функциия могла изменять принятые переменные
их нужно передать по указателю или по ссылке
--------------------------------------------------------
Передача параметров по указателю!!!
Для того чтобы передать параметры в функциию по указателю
принимаемые параметры в функции должны быть указателями
Эти указатели в теле функциии нужно разаменовывать,
чтобы получиить доступ к значениям переданных переменных.
Кроме того при вызове функции нужно взять адреса передаваемых переменных.
*/
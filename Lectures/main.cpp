/*
*** ТЕРНАРНЫЙ ОПЕРАТОР!!! ***
* if(Condition) - Условие это операция сравнения возвращают true либо false.
* if (i < index) buffer[i] = arr[i]; else buffer[i + 1] = arr[i];
* (i < index) ? buffer[i] = arr[i] : buffer[i + 1] = arr[i];
* if - это конструкция.
* ? : тернарный оператор это - оператор (оператор может быть частью выражения).
* Тернарный оператор возвращает одно из двух значений
* value1 или value2, в зависимости от условия (condition).
* value1 и value2 обязательно должны быть одного типа!!!
*/

/*
*** ДВУМЕРНЫЕ ДИНАМИЧЕСКИЕ МАССИВЫ!!! ***
* В двумерном массиве есть строки и столбики.
* Чтобы объявить двумерный динамический массив,
* 1) нужно объявить указатель на указатель;
* 2) затем создать массив указателей;
* 3) и только после этого можно выделять память под строки двумерного массива.

*** ПЕРЕДАЧА ДВУМЕРНОГО ДИНАМИЧКЕСКОГО МАССИВА В ФУНКЦИЮ!!! ***
* Для того чтобы передать двумерный динамический массив в функцию
* достаточно чтобы функция принамала указатель на указатель.
*
*/

/*
*** Git ***
* Ключевым понятием любой системы контроля версий является репозиторий.
* Репозиторий это хранилище. Он может включать в себя исходные файлы, текстовые файлы,
* картинки, звуковые файлы, в репозитории может хранится все что угодно,
* но в основном они предназначены для хранения исходных файлов приложений.
* Репозиторий - это самая обычная папка с файлами.
* Различают локальный репозиторий и удаленный.
* Еще одним ключевым понятием в системах контроля версий является Commit (принять решение).
* Commit - это контрольная точка в которой сохраняются все изменения на данный момент.
* На эту контрольную точку всегда можно вернуться, если что-то пошло не так.
* Commit - это снимок репозитория на какой-то момент времени,
* к этому снимку можно вернуться, в случае не удачных изменений.
* Локальным называют репозиторий на компьютере на локальном диске,
* а удаленным репозиторием на сервере или облочном хранилище.
*
* ***Ветка (Branch)***
* В любом репозитории есть как минимум одна ветка - это master.
* Master - это основная ветка в репозитории.
* Для того чтобы вносить какие-то изменения в рабочий код,
* создают другую ветку и вносят изменения в неё.
* Например test_branch - вносятся какие-то изменения.
* Если изменения удачные, то test_branch можно влить в master,
* т.е. выполнить команду слияния (Merge).
* Часто слияние выполняют при помощи PullRequest - запрос на слияние веток.
* Ветка может отрастать только от какого-то Commit.
* Git - система контроля версий.
*
* *** Шаблоны функций ***
* Шаблонной называется функция которая может работать с любым типом данных.
* Для того чтобы сделать функцию шаблонной, перед ней нужно создать шаблон.
* Шаблон создается следующим образом template<typename T>
* Где tamplate определяет создание шаблона.
* typename определяет имя шаблонного типа.
* T - это шаблонный тип данных.
* После создания шаблона любой принимаемый параметр функции
* и любая локальная переменная функции может быть шаблонного типа.
* Созданный шаблон существует лишь до точки с запятой после прототипа
* или же до закрывающей фигурной скобки реализации.
*
* Ошибка на этапе компановке unresolved external symbol - Неразрешенный внешний символ
* возникает когда список принимаемых параметров в прототипе и реализации функции отличается.
*/
template<typename T>void push_row_back(T**& arr, int& m, const int n)
{
	//1) Создаем буферный массив:
	int** buffer = new int* [m + 1]{};

	//for (int i = 0; i < m + 1; i++) // 'm + 1' - на одну строку больше
	//{
	//	buffer[i] = new int[n] {};
	//}

	//2)Копируем все значения исходного массива в буферный
	for (int i = 0; i < m; i++)
	{
		/*for (int j = 0; j < n; j++)
		{
			buffer[i][j] = arr[i][j];
		}*/
		buffer[i] = arr[i]; //В буферный массив просто переносим адрес соответствующей строки
	}
	//3) Удаление исходного массива
	/*for (int i = 0; i < m; i++)
	{
		delete[] arr[i];
	}*/
	//Не нужно удалять строки, достаточно удалить старый массив указателей:
	delete[] arr;
	//4)Переопределяем новый массив уазателей:
	arr = buffer;
	//5)Создаем добавляемую строку:
	arr[m] = new int[n] {};
	m++;
}

template<typename T>void push_row_front(T**& arr, int& m, const int n)
{
	//1) Создаем буферный массив уазателей нужного размера:
	int** buffer = new int* [m + 1]{};
	//2)копируем адреса строк В новый массив:
	for (int i = 0; i < m; i++)
	{
		buffer[i + 1] = arr[i]; //'i + 1' - Скопировать со смещением
	}
	//3) Удаление старый массив указателей:
	delete[] arr;
	//4)Подменяем адрес на новый массив:
	arr = buffer;
	//5)Создаем добавленную строку:
	arr[0] = new int[n] {};
	//6)Увеличиваем количество сток:
	m++;
}

template<typename T>void pop_row_back(T**& arr, int& m, const int n)
{
	//1) Создаем буферный массив указателей нужного размера:
	int** buffer = new int* [--m]{}; // m - размер строки,
	//'--m' префиксный дикремент уменьшит количество сток на '1' и только потом выделяется память
	//2) Копируем строки в новый массив:
	for (int i = 0; i < m; i++)
	{
		buffer[i] = arr[i];
	}
	//3) Удаляем последнюю строку:
	delete[] arr[m];
	//4) Удаляем старый массив указателей:
	delete[] arr;
	//5) Сохраняем адрес нового массива:
	arr = buffer;
}

template<typename T>void push_col_back(T** arr, const int m, int& n)
{
	//Проходим по строкам и переопределяем каждую строку:
	for (int i = 0; i < m; i++)
	{
		//1) Создаем строку нужного размера:
		int* buffer = new int[n + 1]{};
		//2) Копируем исходную строку в новую строку
		for (int j = 0; j < n; j++)
		{
			buffer[j] = arr[i][j];
		}
		//3) Удаляем исходную строку:
		delete[] arr[i];
		//4) Подменяем адрес старой строки, адресом новой строки:
		arr[i] = buffer;
	}
	//5) После того, как мы переопределили каждую строку, увеличиваем количество строк на единицу:
	n++;
}